import { FormikErrors, useFormik } from "formik";
import { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Layout } from "src/components/Layout";
import {
  FindAllPlantsDocument,
  PlantInput,
  PlantTypes,
  SvgUsed,
  useAddPlantMutation,
} from "src/generated/graphql";

const AddNewPlant: NextPage = () => {
  const router = useRouter();
  const [addNewPlant] = useAddPlantMutation();

  const addNewPlantForm = useFormik({
    initialValues: {
      type: "" as PlantTypes,
      name: "",
      img: "" as SvgUsed,
    },
    validate: (values: PlantInput) => {
      const errors: FormikErrors<PlantInput> = {};

      if (!values.type) {
        errors.type = "Select a plant type.";
      }

      if (!values.name) {
        errors.name = "Name of the plan is required.";
      }

      if (!values.img) {
        errors.img = "Select a representative image for the plant.";
      }

      return errors;
    },
    onSubmit: async (values: PlantInput) => {
      await addNewPlant({
        variables: { input: { ...values } },
        refetchQueries: [{ query: FindAllPlantsDocument }],
      })
        .catch((error) => {
          console.log(error);
        })
        .then((responce) => {
          if (responce?.data?.addPlant) {
            router.push("/");
          }
        });
      addNewPlantForm.resetForm();
    },
  });

  const formikPlantTouched: any = addNewPlantForm.touched;
  const formikPlantErrors: any = addNewPlantForm.errors;

  const isPlantFormFieldValid = (name: string) =>
    !!(formikPlantTouched[name] && formikPlantErrors[name]);
  const getPlantFormErrorMessage = (name: string) => {
    return (
      isPlantFormFieldValid(name) && (
        <small className="red-err">{formikPlantErrors[name]}</small>
      )
    );
  };

  return (
    <>
      <Head>
        <title>Add New Plant</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout btn="back">
        <div className="home-page">
          <form onSubmit={addNewPlantForm.handleSubmit} className="plant-form">
            <div className="plant-field">
              <label htmlFor="type">Type</label>
              <select
                id="type"
                name="type"
                onChange={addNewPlantForm.handleChange}
                value={addNewPlantForm.values.type || ""}
              >
                <option value="">- - -</option>
                {Object.keys(PlantTypes).map((i) => (
                  <option key={i} value={i}>
                    {i}
                  </option>
                ))}
              </select>
              {getPlantFormErrorMessage("type")}
            </div>
            <div className="plant-field">
              <label htmlFor="name">Name</label>
              <input
                id="name"
                name="name"
                type="text"
                onChange={addNewPlantForm.handleChange}
                value={addNewPlantForm.values.name || ""}
              />
              {getPlantFormErrorMessage("name")}
            </div>
            <div className="plant-field">
              <label htmlFor="img">Representative image</label>
              <select
                id="img"
                name="img"
                onChange={addNewPlantForm.handleChange}
                value={addNewPlantForm.values.img || ""}
              >
                <option value="">- - -</option>
                {Object.keys(SvgUsed).map((i) => (
                  <option key={i} value={i.toLowerCase()}>
                    {i}
                  </option>
                ))}
              </select>
              {getPlantFormErrorMessage("img")}
            </div>
            <button type="submit">Submit</button>
          </form>
        </div>
      </Layout>
    </>
  );
};

export default AddNewPlant;
